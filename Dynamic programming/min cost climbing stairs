class Solution {
public:
    // Original solve function (Iterative approach without DP array)
    int solve(vector<int>& cost, int n) {
        if (n == 0) return 0;
        if (n == 1) return cost[0];
        
        int prev1 = cost[0];
        int prev2 = cost[1];
        
        for (int i = 2; i < n; i++) {
            int curr = cost[i] + min(prev1, prev2);
            prev1 = prev2;
            prev2 = curr;
        }
        
        return min(prev1, prev2);
    }

    // Recursive approach with memoization (solve2)
    int solve2(vector<int>& cost, int n, vector<int>& dp) {
        if (n == 0) return cost[0];
        if (n == 1) return cost[1];

        if (dp[n] != -1) return dp[n];

        dp[n] = cost[n] + min(solve2(cost, n - 1, dp), solve2(cost, n - 2, dp));
        return dp[n];
    }

    // Iterative approach with a DP array (solve3)
    int solve3(vector<int>& cost, int n) {
        vector<int> dp(n + 1);

        dp[0] = cost[0];
        dp[1] = cost[1];

        for (int i = 2; i < n; i++) {
            dp[i] = cost[i] + min(dp[i - 1], dp[i - 2]);
        }

        return min(dp[n - 1], dp[n - 2]);
    }

    // Unified function to choose between different approaches
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        
        // Uncomment one of the following lines to choose the desired approach

        // return solve(cost, n); // Original iterative approach without DP array

        // Recursive approach with memoization
        // vector<int> dp(n + 1, -1);
        // return min(solve2(cost, n - 1, dp), solve2(cost, n - 2, dp));

        // Iterative approach with a DP array
        return solve3(cost, n);
    }
};
