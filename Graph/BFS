#include <bits/stdc++.h>
using namespace std;

void traversal(unordered_map<int, list<int> > &adjList, unordered_map<int, bool> &visited, vector<int> &answer, int node) {
    queue<int> Q;
    Q.push(node);
    visited[node] = 1;

    while(!Q.empty()) {
        int frontVal = Q.front();
        Q.pop();
        visited[frontVal] = true;
        answer.push_back(frontVal);

        for(auto i : adjList[frontVal]) {
            if(!visited[i]) {
                Q.push(i);
            }
        }
    }
}

vector<int> BFS(int vertex, vector< pair<int, int> > edges) {
    unordered_map<int, list<int> > adjList;
    vector<int> answer;
    unordered_map<int, bool> visited;
    
    // Creating Adjacency List
    for(int i=0; i<edges.size( ); i++) {
        int u = edges[i].first;
        int v = edges[i].second;

        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    // Traversing all components of a graph
    for(int i=0; i<vertex; i++) {
        if(!visited[i]) {
            traversal(adjList, visited, answer, i);
        }
    }

    return answer;
}

int main() {
    int n, m;

    cout << "Enter the number of nodes : ";
    cin >> n;

    cout << "Enter the number of edges : ";
    cin >> m;

    vector< pair<int,int> > edges(m, {0,0});

    for(int i=0; i<m; i++) {
        cin >> edges[0].first;
        cin >> edges[0].second;
    }

    vector<int> solution = BFS(n, edges);

    cout << "BFS Traversal : ";
    for(auto i : solution) {
        cout << i << " ";
    }
    cout << endl;

    return 0;
}















SHORT METHOD ALSO PRESENT





#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<int> bfsTraversal(int n, vector<vector<int>> &adj) {
    vector<int> bfs; // Stores BFS traversal order
    vector<bool> visited(n, false);
    queue<int> q;

    // Start BFS from vertex 0
    q.push(0);
    visited[0] = true;

    // Perform BFS
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        bfs.push_back(u); // Add vertex to BFS traversal

        // Visit all adjacent vertices of u
        for (int v : adj[u]) {
            if (!visited[v]) {
                q.push(v);
                visited[v] = true;
            }
        }
    }

    return bfs;
}

int main() {
    int n, m;
    cout << "Enter the number of vertices: ";
    cin >> n;

    // Initialize adjacency list
    vector<vector<int>> adjList(n);

    cout << "Enter the number of edges: ";
    cin >> m;

    cout << "Enter edges (source destination):" << endl;
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
    }

    // Perform BFS traversal
    vector<int> bfs = bfsTraversal(n, adjList);

    // Print BFS traversal
    cout << "BFS Traversal starting from vertex 0: ";
    for (int v : bfs) {
        cout << v << " ";
    }
    cout << endl;

    return 0;
}
