#include<iostream>
#include<queue>
using namespace std;


class Heap{
    public:
    int arr[100];
    int size=0;
    Heap(){
        arr[0]=-1;
        size=0;
    }

    void insert(int val){
        size=size+1;
        int index=size;
        arr[index]=val;
        while(index>1){
            int parent=index/2;
            if(arr[parent]<arr[index]){
                swap(arr[parent],arr[index]);
                index=parent;
            }
            else{
                return;
            }
        }
    }
    void print(){
        for(int i=1;i<=size;i++){
            cout<<arr[i]<<" ";}
            cout<<endl;
        
    }

   void Deletefromheap(){
    if(size==0){
        cout<<"nothing to delete";
        return ;
    }
    arr[1]=arr[size];
    size--;
    int i=1;
    while(i<size){
        int leftIndex=2*1;
        int rightIndex=2*i+1;
        if(leftIndex<size && arr[i]<arr[leftIndex]){
            swap(arr[i],arr[leftIndex]);
            i=leftIndex;
        }
        else if(rightIndex<size && arr[i]<arr[rightIndex]){
            swap(arr[i],arr[rightIndex]);
            i=rightIndex;
        }
        else{
            return;
        }
    }
   }
   
};

void heapify(int arr[],int n,int i){
int largest=i;
int left=2*i;
int right=2*i+1;
if(left<=n && arr[largest]<arr[left]){
    largest=left;
}if(right<=n && arr[largest]<arr[right]){
    largest=right;
}

if(largest != i){
    swap(arr[largest],arr[i]);
    heapify(arr,n,largest);
}
}

void heapsort(int arr[],int n){
    int size=n;
    while(size>1){
        swap(arr[size],arr[1]);
        size--;
        heapify(arr,size,1);
    }
}

int main(){
Heap h;
h.insert(30);
h.insert(20);
h.insert(50);
h.insert(40);
h.insert(55);
h.print();
h.Deletefromheap();
h.print();

int arr[6]={-1,30,20,50,40,55};
int n=5;
for(int i=n/2;i>0;i--){
    heapify(arr,n,i);
}
cout<<"print array";
for(int i=1;i<=n;i++){
    cout<<arr[i]<<" ";
}
cout<<endl;

heapsort(arr,n);
for(int i=1;i<=n;i++){
    cout<<arr[i]<<" ";
}
//// MAX HEAP PRIORITY QUEUE

priority_queue<int> maxHeap;

    maxHeap.push(52);
    maxHeap.push(50);
    maxHeap.push(54);
    maxHeap.push(40);
    maxHeap.push(35);
    maxHeap.push(65);

    cout << "Top element : " << maxHeap.top() << endl;

    maxHeap.pop();
    cout << "Top element : " << maxHeap.top() << endl;

    maxHeap.pop();
    maxHeap.pop();
    cout << "Top element : " << maxHeap.top() << endl;

    if(maxHeap.empty()) {
        cout << "Max Heap is empty!" << endl;
    }





////  HEAP PRIORITY QUEUE

     priority_queue<int, vector<int>, greater<int> > minHeap;

    minHeap.push(52);
    minHeap.push(50);
    minHeap.push(54);
    minHeap.push(40);
    minHeap.push(35);
    minHeap.push(65);

    cout << "Top element : " << minHeap.top() << endl;

    minHeap.pop();
    cout << "Top element : " << minHeap.top() << endl;

    minHeap.pop();
    minHeap.pop();
    cout << "Top element : " << minHeap.top() << endl;

    if(minHeap.empty()) {
        cout << "Min Heap is empty!" << endl;
    }



    return 0;
}
