/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*, vector<ListNode*>, compare> minHeap;
        int K = lists.size();

        // Empty list
        if (K == 0) {
            return NULL;
        }

        // Step 1 : Creating a Min Heap
        for (int i = 0; i < K; i++) {
            if (lists[i] != NULL) {
                minHeap.push(lists[i]);
            }
        }

        ListNode* head = NULL;
        ListNode* tail = NULL;

        // Step 2 : Comparing next nodes
        while (minHeap.size() > 0) {
            ListNode* top = minHeap.top();
            minHeap.pop();

            if (top->next != NULL) {
                minHeap.push(top->next);
            }

            if (head == NULL) {
                head = tail = top;
            } else {
                tail->next = top;
                tail = top;
            }
        }

        return head;
    }

private:
    class compare {
    public:
        bool operator()(ListNode* a, ListNode* b) {
            return a->val > b->val;
        }
    };
};
