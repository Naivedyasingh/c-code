#include <bits/stdc++.h> 
/*************************************************************
 
    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
       public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() 
        {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/
int countNodes(BinaryTreeNode<int>* root) {
    if (root == NULL) {
        return 0;
    }

    int left = countNodes(root->left);
    int right = countNodes(root->right);

    return left + right + 1;
}

bool isCBT(BinaryTreeNode<int>* root, int index, int cnt) {
    if (root == NULL) {
        return true;
    }

    if (index >= cnt) {
        return false;
    }

    bool left = isCBT(root->left, 2 * index + 1, cnt);
    bool right = isCBT(root->right, 2 * index + 2, cnt);

    return left && right;
}

bool isMaxOrder(BinaryTreeNode<int>* root) {
    if (root == NULL) {
        return true;
    }

    if (root->left == NULL && root->right == NULL) {
        return true;
    }

    if (root->right == NULL) {
        return (root->data >= root->left->data);
    }

    bool left = isMaxOrder(root->left);
    bool right = isMaxOrder(root->right);
    bool curr = (root->data >= root->left->data) && (root->data >= root->right->data);

    return left && right && curr;
}

bool isBinaryHeapTree(BinaryTreeNode<int>* root) {
    int index = 0;
    int totalCount = countNodes(root);
    if (isCBT(root, index, totalCount) && isMaxOrder(root)) {
        return true;
    } else {
        return false;
    }
}
