/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/class Info {
public:
    int maxi;
    int mini;
    bool isBST;
    int size;
};

Info solve(TreeNode* root, int& ans) {
    if (root == nullptr) {
        return {INT_MIN, INT_MAX, true, 0};
    }
    Info left = solve(root->left, ans);
    Info right = solve(root->right, ans);
    Info currNode;
    currNode.size = left.size + right.size + 1;
    currNode.maxi = std::max(root->data, std::max(left.maxi, right.maxi));
    currNode.mini = std::min(root->data, std::min(left.mini, right.mini));
    if (left.isBST && right.isBST && (root->data > left.maxi && root->data < right.mini)) {
        currNode.isBST = true;
    } else {
        currNode.isBST = false;
    }
    if (currNode.isBST) {
        ans = std::max(ans, currNode.size);
    }
    return currNode;
}

int largestBST(TreeNode *root) {
    int maxSize = 0;
    solve(root, maxSize);
    return maxSize;
}
