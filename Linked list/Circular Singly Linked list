#include<iostream>
using namespace std;
class node{
public:int data ;
node* next;

//constructor
node(int d){
    this->data=d;
    this->next=NULL;
}
~node(){
    int value=this->data;
    if(this->next!=NULL){
        delete next;
        next=NULL;
    }
    cout<<"memory is free node with data: "<<value<<endl;
}
};


//insert the node
void insertNode(node* &tail,int element,int d){

    //empty list
    if(tail==NULL){
        node* newnode=new node(d);
        tail=newnode;
        newnode->next=newnode;
    }
    else{
    //non-empty
    //assuming that the,elment is present int the list
    node* curr=tail;
    while(curr->data!=element){
        curr=curr->next;
    }
    //assuming found->current is representing element wala node
    node* temp =new node(d);
    temp->next=curr->next;
    curr->next=temp;
 }

}

//traversal
void print(node* tail){
    node* temp=tail;

    //empty list
    if(tail==NULL){
        cout<<"List is Empty";
        return;
    }
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
    }while(tail!=temp);
    cout<<endl;
}

//delete node
void delectNode(node* &tail,int value){
//empty list
if(tail==NULL){
    cout<<"list is empty,please check again"<<endl;
    return;
}
else{
//non-empty

//assuming that "value is present int he linked list"
node* previous=tail;
node* current=previous->next;


//increase the value of pervious and current when the value of data is not equal to value
while(current->data!=value){
    previous=current;
    current=current->next;
}

previous->next=current->next;

//one node linked list
if(current==previous){
    tail=NULL;
}
//>=2 node linked list
else if(tail==current){
    tail=previous;
}
current->next=NULL;
delete current;
}
}


node* floyDetectLoop(node* head){
    if(head==NULL)
    return NULL;
       
     node* slow=head;
     node* fast=head;


    while(slow!=NULL && fast!=NULL ){
        fast=fast->next;
        if(fast!=NULL){
            fast=fast->next;
        }
        slow=slow->next;
        
        if(slow==fast){
            cout<<"It is present:"<<slow->data<<endl;
            return slow;
        }


    }
    return NULL;
}


node* getstartnode(node* tail){
    if(tail==NULL)
    return NULL;

    node* intersection=floyDetectLoop(tail);
    node* slow=tail;

    while(slow != intersection){
        slow=slow->next;
        intersection=intersection->next;
    }
    return slow;
}

int main(){
node* tail=NULL;
//empty list
insertNode(tail,5,3);
print(tail);

insertNode(tail,3,5);
print(tail);

insertNode(tail,5,7);
print(tail);


insertNode(tail,7,9);
print(tail);

insertNode(tail,5,6);
print(tail);

insertNode(tail,9,10);
print(tail);

insertNode(tail,3,4);
print(tail);


delectNode(tail,3);
print(tail);

return 0;
}
