#include<iostream>
using namespace std;
class node{
    public:int data;
    node* previous;
    node* next;


    //constructor
    node(int d){
        this->data=d;
        this->previous=NULL;
        this->next=NULL;
            }
            ~node(){
                int val=this->data;
                if(next!=NULL){
                    delete next;
                    next=NULL;
                }
                cout<<"memory free for node with data:"<<val<<endl;;
            }
};

//traversing the linked-list
void print(node* head){
    node* temp=head;

    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}


//give lenght to linked list
int getlenght(node* head){
    int len=0;
        node* temp=head;

    while(temp!=NULL){
        len++;
        temp=temp->next;
    }
    return len;
}

//insert at the head
void insertAthead(node* &head,node* &tail,int d){
if(head==NULL){
    node* temp=new node(d);
    head=temp;
    tail=temp;
  }
  else{
node* temp=new node(d);
temp->next=head;
head->previous=temp;
head=temp;
}
}

//Insert at the heatail
void insertAtTail(node* &tail,node* &head,int d){
if( tail==NULL){
    node* temp=new node(d);
    tail=temp;
    head=temp;
}
else{
    node* temp=new node(d);
    tail->next=temp;
    temp->previous=tail;
    tail=temp;
}
}
//insert at the n position
void insertAtPosition(node* &head,node* &tail,int position,int d){
// insert at start
if(position==1){
    insertAthead(head,tail,d);
    return;
}
node* temp=head;
int count =1;
while(count<position-1){
    temp=temp->next;
    count++;
}

//insert at the last
if(temp->next==NULL){
    insertAtTail(tail,head,d);
    return;
}


//insert the node in any place
node* nodeToInsert=new node(d);
nodeToInsert->next=temp->next;
temp->next->previous=nodeToInsert;
temp->next=nodeToInsert;
nodeToInsert->previous=temp;
}




 void deletenode(int position,node* & head){
    //deleting first or start node
    if(position==1){
        node* temp=head;
     temp->next->previous=NULL;
     head=temp->next;
     temp->next=NULL;
     delete temp;
    }
    else{
        //deleting any middle node or last node
        node* current=head;
        node* previous=NULL;


        int count=1;
        if(count<position){
        previous=current;
        current=current->next;
        count++;
        }
       current->previous=NULL;
        previous->next=current->next;
        current->next=NULL;
        delete current; 
    }
 }






int main(){
node* node1=new node(10);
node* head=node1;
node* tail=node1;
print(head);
cout<<getlenght(head)<<endl;

insertAthead(head,tail,11);
print (head);
cout<<"head"<<head->data<<endl;
cout<<"tail"<<tail->data<<endl;
insertAthead(head,tail,12);
print (head);
cout<<"head"<<head->data<<endl;
cout<<"tail"<<tail->data<<endl;

insertAtTail(tail,head,25);
print(head);
cout<<"head"<<head->data<<endl;
cout<<"tail"<<tail->data<<endl;


insertAtPosition(head,tail,1,1001);
print(head);
cout<<"head"<<head->data<<endl;
cout<<"tail"<<tail->data<<endl;
insertAtPosition(head,tail,2,1002);
print(head);
cout<<"head"<<head->data<<endl;
cout<<"tail"<<tail->data<<endl;
insertAtPosition(head,tail,7,1003);
print(head);
cout<<"head"<<head->data<<endl;
cout<<"tail"<<tail->data<<endl;


deletenode(1,head);
print(head);
cout<<"head"<<head->data<<endl;
cout<<"tail"<<tail->data<<endl;

return 0;
}
